#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('KMUH_Hosiptal:server');
var http = require('http');
var db = require('./db');
var querystring = require('querystring');
var https = require('https');

/**
 * Initial database schema/model/entity
 */
var KMUH_Info_Schema = new db.Schema({
  account: String,
  birthday: String,
  id: String,
  isFirstBooking: Boolean
});

var KMUH_Favorite_Schema = new db.Schema({
    account:String,
    favorite_list:
        [{
            location: String,
            deptid: String,
            deptname: String,
            subDeptCode: String,
            subDeptName: String,
            doctorid: String,
            doctorname: String,
            noonType: String,
            favoriteday: {type: Number, min: 0, max: 6},
            updateTime: Date
        }]
});

var kmuhInfoTable = db.model('kmuhInfoTable', KMUH_Info_Schema);
var kmuhFavoriteTable = db.model('kmuhFavoriteTable', KMUH_Favorite_Schema);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3100');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
